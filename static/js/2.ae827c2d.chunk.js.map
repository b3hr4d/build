{"version":3,"sources":["_actions/player.actions.ts","_helpers/midiContext.ts","plugin/Game/Canvas.ts","plugin/Game/Notes.ts","plugin/Game/Game.ts","plugin/Melodition/Melodition.ts","_helpers/pianoSizes.ts","_actions/midi.actions.ts"],"names":["Melo","MidiState","touchedKeys","score","trackLen","FingersClass","note","len","hand","beat","num","pitch","finger","color","bColor","fColor","cColor","end","showing","this","children","front","getAttribute","id","c","back","setAttribute","style","fill","BackMover","height","margin","y","yPos","update","ctx","img","drawImage","Math","floor","MusicLine","width","x","lw","draw","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","LessonNote","text","gap","r","beg","start","mover","lineColor","crash","hit","move","lineCap","arc","PI","fillStyle","font","textAlign","textBaseline","fillText","ExerciseNote","props","outline","globalCompositeOperation","OutLine","Object","assign","Notes","canvas","counter","tapSize","spaceSize","notePos","fullNotes","context","assigner","options","playGame","clear","updateFullSong","clearRect","drawNote","showTrack","memo","noteMemo","values","forEach","noteArr","i","length","n","pos","prevNote","prevState","find","o","includes","push","notes","getContext","Game","songLength","bpm","rythm","image","backMover","barNotes","updateBacks","updateNotes","pitchName","t","firstLine","myLine","document","createElement","save","Array","from","_","v","src","toDataURL","onload","tap","m","p","yy","cc","center","le","drawBack","pushNote","g","splice","touch","Image","Melodition","game","master","player","song","songDetails","loaded","onAir","handRefs","seekBar","keyRefs","canvasSize","pianoSize","seekValue","metVol","metTrack","metOn","loading","playMode","noteMode","TrackID","tempo","playVolume","musicVolume","drumInfo","trackInfo","metronomeInfo","storeDrums","storeTracks","storeFingers","equalizer","drumVolumes","noteInfo","neededTracks","fingerNotes","firstDelay","tickID","currentBeat","tickerDelay","tickerStep","animeFrame","nextWhen","nextBeat","sentWhen","anime","midiKeys","trainNotes","stopReset","drawGame","line","round","startPlay","resetNodeValues","audioContext","state","console","log","resume","beatDur","setTimeout","playAllTracks","queueNextBeats","requestAnimationFrame","moveSVG","moveFingers","stopPlay","getElementById","click","clearTimeout","stopAllTracks","cancelAnimationFrame","cancelQueue","resetGame","fin","hide","training","seekMove","next","Number","keys","pushFinger","show","stop","elapsedTimeSinceStart","startTime","setMasterVolume","play","getNbTracks","rakeMouseWheel","e","deltaY","seekY","seekSVG","value","changeSeeker","audioNode","gain","setValueAtTime","volume","band32","band64","band128","band256","band512","band1k","band2k","band4k","band8k","band16k","beat16duration","currentTime","playMetronome","sendNextBeats","wait","when","startBeat","endBeat","N","beatLen","channel","findDrumInfoHand","drum","zones","sound","info","window","variable","random","queueWaveTable","target","preset","pitches","duration","volumeRatio","sort","n1","n2","track","currentTrack","inChordCount","trc","nn","shift","octave","inChordDelay","slides","fingers","nBeat","handArr","key","b","filter","item","diff","findTrackInfoHand","order","drm","midiNoteOn","velocity","midiNoteOff","elem","every","some","cancel","notePitch","requestPlayer","dispatch","newMelodition","Melodi","songbeat","cauntMeasures","neededLines","type","REQUEST_PLAYER","payload","then","lessonCompiler","songs","index","API","get","data","AudioApi","res","loadBuffer","buffer","vol","realTempo","getDuration","catch","bufferError","urlError","err","gamePiano","getBoundingClientRect","keyXPos","pianoLeft","padLeft","k","rect","w","centerX","classList","contains","left","sizeCalculator","DRAW_GAME_PIANO","notePiano","DRAW_NOTE_PIANO","drawFinger","DRAW_FINGER","drawSeekBar","DRAW_SEEKBAR","DRAW_GAME","drawNotes","DRAW_NOTES","resizePlayer","RESIZE_PLAYER","resetPlayer","RESET_PLAYER","changeMode","mode","ENTER_PLAYMODE","EXIT_PLAYMODE","canvasWheel","startPlayer","stopPlayer","details","progress","saveData","name","title","time","Date","toLocaleTimeString","JSON","stringify","date","toLocaleDateString","store","addPlayTimes","MeloMusicVolume","MeloAssigner","midiInput","requsetMidi","navigator","requestMIDIAccess","midiAccess","inputs","entry","seccessHandler","onmidimessage","onMidiMessage","onstatechange","error","errorHandler","changeMidi","enable","midiState","hold","midiEvent","command","holder"],"mappings":"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","file":"static/js/2.ae827c2d.chunk.js","sourcesContent":["import { Dispatch } from \"react\";\r\nimport { ICardDetail, AppActions } from \"../_types\";\r\nimport {\r\n  REQUEST_PLAYER,\r\n  RESIZE_PLAYER,\r\n  RESET_PLAYER,\r\n  DRAW_FINGER,\r\n  DRAW_GAME_PIANO,\r\n  DRAW_NOTES,\r\n  DRAW_GAME,\r\n  ICanvas,\r\n  ENTER_PLAYMODE,\r\n  EXIT_PLAYMODE,\r\n  DRAW_SEEKBAR,\r\n  DRAW_NOTE_PIANO,\r\n  INoteDraw,\r\n} from \"../_types/player.types\";\r\nimport { store } from \"../_store/store.config\";\r\nimport { API, AudioApi } from \"../_helpers/api\";\r\nimport MidiState from \"../_helpers/midiContext\";\r\nimport { addPlayTimes } from \"./profile.actions\";\r\nimport { cauntMeasures } from \"../_helpers/constants\";\r\nimport { sizeCalculator } from \"../_helpers/pianoSizes\";\r\nimport { Melodition } from \"../plugin/Melodition/Melodition\";\r\n\r\nvar Melo: Melodition | undefined;\r\n\r\nexport const requestPlayer = (info: ICardDetail) => (\r\n  dispatch: Dispatch<AppActions>\r\n) => {\r\n  import(\"../_helpers/playerApi\").then(({ lessonCompiler }) => {\r\n    lessonCompiler(info)\r\n      .then((Melodi) => {\r\n        if (Melodi) {\r\n          if (Melodi.songs.length > 0) {\r\n            Melodi.songs.forEach((song, index) =>\r\n              API.get(`/song/v2/${song.id}`)\r\n                .then(({ data }) =>\r\n                  AudioApi(data)\r\n                    .then((res) => {\r\n                      Melodi.song\r\n                        ?.loadBuffer({ buffer: res.data, vol: song.vol })\r\n                        .then(() => {\r\n                          if (Melodi.songs.length === index + 1) {\r\n                            const realTempo = Melodi.tempo / 60;\r\n                            const songbeat =\r\n                              Melodi.song?.getDuration()! / realTempo;\r\n                            newMelodition(Melodi, songbeat);\r\n                          }\r\n                        });\r\n                    })\r\n                    .catch((bufferError) => console.log(bufferError))\r\n                )\r\n                .catch((urlError) => console.log(urlError))\r\n            );\r\n          } else {\r\n            newMelodition(Melodi);\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  });\r\n  function newMelodition(Melodi: any, songbeat?: number) {\r\n    Melodi.songLength = cauntMeasures(\r\n      Melodi.rythm,\r\n      Melodi.storeDrums,\r\n      Melodi.storeTracks,\r\n      songbeat\r\n    );\r\n    Melodi.loaded = true;\r\n    Melo = new Melodition(Melodi);\r\n    const { songLength, neededLines, neededTracks, bpm } = Melodi;\r\n    dispatch({\r\n      type: REQUEST_PLAYER,\r\n      payload: { songLength, neededLines, neededTracks, bpm },\r\n    });\r\n  }\r\n};\r\n\r\nexport const gamePiano = (\r\n  keyRefs: SVGGElement[],\r\n  canvasSize?: ICanvas,\r\n  tapSize?: number\r\n) => (dispatch: Dispatch<AppActions>) => {\r\n  if (canvasSize && tapSize) {\r\n    const pianoSize = sizeCalculator(keyRefs, canvasSize);\r\n    Melo?.assigner({ pianoSize, keyRefs, canvasSize, tapSize });\r\n    dispatch({\r\n      type: DRAW_GAME_PIANO,\r\n      payload: { pianoSize, canvasSize, tapSize },\r\n    });\r\n  } else {\r\n    Melo?.assigner({ keyRefs });\r\n    dispatch({ type: DRAW_GAME_PIANO });\r\n  }\r\n};\r\nexport const notePiano = (keyRefs: SVGGElement[], noteInfo: INoteDraw) => (\r\n  dispatch: Dispatch<AppActions>\r\n) => {\r\n  Melo?.assigner({ noteInfo, keyRefs });\r\n  dispatch({ type: DRAW_NOTE_PIANO, payload: { noteInfo } });\r\n};\r\nexport const drawFinger = (payload: any) => (\r\n  dispatch: Dispatch<AppActions>\r\n) => {\r\n  Melo?.assigner(payload);\r\n  if (!Melo?.playMode) Melo?.stopReset();\r\n  dispatch({ type: DRAW_FINGER });\r\n};\r\nexport const drawSeekBar = (payload: any) => (\r\n  dispatch: Dispatch<AppActions>\r\n) => {\r\n  Melo?.assigner(payload);\r\n  dispatch({ type: DRAW_SEEKBAR });\r\n};\r\nexport const drawGame = (payload: any) => (dispatch: Dispatch<AppActions>) => {\r\n  Melo?.drawGame(payload);\r\n  dispatch({ type: DRAW_GAME });\r\n};\r\nexport const drawNotes = (payload: any) => (dispatch: Dispatch<AppActions>) => {\r\n  Melo?.drawNote(payload);\r\n  dispatch({ type: DRAW_NOTES });\r\n};\r\nexport const resizePlayer = () => (dispatch: Dispatch<AppActions>) => {\r\n  Melo?.stopPlay();\r\n  dispatch({ type: RESIZE_PLAYER });\r\n};\r\nexport const resetPlayer = () => (dispatch: Dispatch<AppActions>) => {\r\n  Melo?.stopPlay();\r\n  dispatch({ type: RESET_PLAYER });\r\n};\r\nexport const changeMode = (mode: boolean) => (\r\n  dispatch: Dispatch<AppActions>\r\n) => {\r\n  Melo?.assigner({ playMode: mode });\r\n  Melo?.stopPlay();\r\n  if (mode) dispatch({ type: ENTER_PLAYMODE });\r\n  else dispatch({ type: EXIT_PLAYMODE });\r\n};\r\n\r\nexport const canvasWheel = (e: number | React.WheelEvent) => {\r\n  Melo?.rakeMouseWheel(e);\r\n};\r\nexport const startPlayer = () => {\r\n  Melo?.startPlay();\r\n};\r\nexport const stopPlayer = () => {\r\n  Melo?.stopPlay();\r\n  const score = MidiState.score;\r\n  if (Melo && score.length > 0) {\r\n    const details = Melo.songDetails;\r\n    const len = Melo.neededTracks.length;\r\n    const progress = Math.round((score.length / len) * 100) + \"%\";\r\n    const saveData = {\r\n      song: { name: details.title, id: details.id, notes: len },\r\n      time: new Date().toLocaleTimeString(),\r\n      score: JSON.stringify(score),\r\n      date: new Date().toLocaleDateString(),\r\n      progress,\r\n    };\r\n    MidiState.score = [];\r\n    store.dispatch(addPlayTimes(saveData));\r\n  }\r\n};\r\n\r\nexport const midiNoteOn = (pitch: number, vol = 0.7) => {\r\n  Melo?.midiNoteOn(pitch, vol);\r\n};\r\nexport const midiNoteOff = (pitch: number) => {\r\n  Melo?.midiNoteOff(pitch);\r\n};\r\nexport const MeloMusicVolume = (value: number) => {\r\n  Melo?.assigner({ musicVolume: value });\r\n  Melo?.song?.setMasterVolume(value);\r\n};\r\nexport const MeloAssigner = (value: { [key: string]: any }) => {\r\n  Melo?.assigner(value);\r\n};\r\n","export class Midi {\r\n    touchedKeys: {\r\n        note: number\r\n        y: number\r\n        hit?: string\r\n    }[] = []\r\n    score: any = []\r\n    trackLen: number\r\n}\r\nconst MidiState = new Midi();\r\n\r\nexport default MidiState\r\n","interface IFingersClass {\r\n  note: any,\r\n  len: number,\r\n  hand: any,\r\n  beat: number\r\n  num: number\r\n  pitch: number\r\n}\r\nexport class FingersClass {\r\n  len: number;\r\n  note: any;\r\n  finger: SVGElement;\r\n  hand: string;\r\n  color: string;\r\n  bColor: string;\r\n  fColor: string;\r\n  cColor: string;\r\n  end: number;\r\n  num: number;\r\n  pitch: number;\r\n  showing: boolean;\r\n  constructor({ note, len, hand, beat, num, pitch }: IFingersClass) {\r\n    this.len = len;\r\n    this.note = note;\r\n    this.num = num;\r\n    this.pitch = pitch;\r\n    this.end = this.len - 1 + beat;\r\n    if (this.end <= beat) {\r\n      this.end = beat + 1;\r\n    }\r\n    this.hand = hand.hand;\r\n    this.finger = hand.finger;\r\n    this.fColor = \"rgba(210, 210, 210, 0.5)\";/*hand.finger.getAttribute(\"fill\");*/\r\n    this.cColor = note.children.front.getAttribute(\"fill\");\r\n    this.bColor = note.id;\r\n    if (this.hand === \"right\") {\r\n      this.color = \"yellow\";\r\n    } else {\r\n      this.color = \"skyblue\";\r\n    }\r\n    this.showing = true;\r\n  }\r\n  show(c?: string) {\r\n    let color = this.color;\r\n    if (c) color = c\r\n    this.note.children.back.setAttribute(\"fill\", color);\r\n    this.note.children.front.setAttribute(\"fill\", \"black\");\r\n    this.finger.setAttribute(\"fill\", color);\r\n  }\r\n  hide() {\r\n    this.note.children.back.setAttribute(\"fill\", this.bColor);\r\n    this.note.children.front.setAttribute(\"fill\", this.cColor);\r\n    this.note.children.back.style.fill = \"\";\r\n    this.note.children.front.style.fill = \"\";\r\n    this.finger.setAttribute(\"fill\", this.fColor);\r\n    this.showing = false\r\n  }\r\n}\r\nexport class BackMover {\r\n  public y: number;\r\n  public end: number;\r\n  private yPos: number;\r\n  public margin: number;\r\n  constructor(beat: number, height: number, margin: number) {\r\n    this.y = 0;\r\n    this.margin = margin;\r\n    this.yPos = beat * height;\r\n    this.end = this.yPos + height + margin;\r\n  }\r\n  update = (ctx: CanvasRenderingContext2D, img: HTMLImageElement) => {\r\n    ctx.drawImage(img, 0, Math.floor(this.y - this.yPos - this.margin));\r\n  }\r\n}\r\ninterface IMusicLine {\r\n  x: number;\r\n  y: number;\r\n  lw: number;\r\n  color: string;\r\n  width: number;\r\n}\r\nexport class MusicLine {\r\n  private x: number;\r\n  private y: number;\r\n  private lw: number;\r\n  private color: string;\r\n  private width: number;\r\n  constructor({ width, color, x, y, lw }: IMusicLine) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.color = color;\r\n    this.lw = lw\r\n  }\r\n  draw = (ctx: CanvasRenderingContext2D) => {\r\n    ctx.beginPath();\r\n    ctx.moveTo(0, this.y);\r\n    ctx.lineTo(this.width, this.y);\r\n    ctx.lineWidth = this.lw\r\n    ctx.strokeStyle = this.color\r\n    ctx.stroke();\r\n    ctx.fill();\r\n  }\r\n}\r\ninterface ILessonNote {\r\n  width: number,\r\n  height: number,\r\n  color: string,\r\n  x: number,\r\n  note: number;\r\n  y: number,\r\n  end: number,\r\n  text: string,\r\n  gap: number,\r\n}\r\nexport class LessonNote {\r\n  y: number;\r\n  x: number;\r\n  r: number;\r\n  gap: number;\r\n  beg: number;\r\n  end: number;\r\n  start: number;\r\n  height: number;\r\n  width: number;\r\n  mover: number;\r\n  note: number;\r\n  text: string;\r\n  color: string;\r\n  lineColor: string;\r\n  crash: boolean;\r\n  hit?: number;\r\n  constructor({ width, height, color, x, y, end, note, text, gap }: ILessonNote) {\r\n    this.y = y;\r\n    this.start = -y;\r\n    this.gap = gap;\r\n    this.beg = y + gap;\r\n    this.end = end;\r\n    this.note = note;\r\n    this.height = -height;\r\n    this.x = x;\r\n    this.text = text;\r\n    this.width = width;\r\n    this.r = width / 2;\r\n    this.color = color;\r\n    this.lineColor = 'black';\r\n    this.mover = height;\r\n    this.crash = false;\r\n  }\r\n  move = () => {\r\n    this.crash = true;\r\n    this.mover = this.y - this.gap;\r\n    if (this.mover > -this.height) {\r\n      this.mover = -this.height\r\n    }\r\n  }\r\n  update = (ctx: CanvasRenderingContext2D) => {\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.x, this.y + this.start);\r\n    ctx.lineTo(this.x, this.y + this.height);\r\n    ctx.lineWidth = this.width * 0.85;\r\n    ctx.strokeStyle = 'black';\r\n    ctx.lineCap = 'round';\r\n    ctx.stroke();\r\n    ctx.beginPath();\r\n    ctx.moveTo(this.x, this.y + this.start);\r\n    ctx.lineTo(this.x, this.y + this.height);\r\n    ctx.lineWidth = this.width * 0.2;\r\n    ctx.strokeStyle = 'white';\r\n    ctx.stroke();\r\n    if (this.crash) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.x, this.y + this.start);\r\n      ctx.lineTo(this.x, this.y - this.mover);\r\n      ctx.lineWidth = this.width * 0.2;\r\n      ctx.strokeStyle = 'red';\r\n      ctx.stroke();\r\n    }\r\n    if (this.hit) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.x, this.y + this.start);\r\n      ctx.lineTo(this.x, this.y - this.hit);\r\n      ctx.lineWidth = this.width * 0.25;\r\n      ctx.strokeStyle = this.color;\r\n      ctx.stroke();\r\n    }\r\n    if (this.crash && !this.hit) {\r\n      this.color = 'red';\r\n    }\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y + this.start, this.r * 1.4, 0, 2 * Math.PI);\r\n    ctx.fillStyle = 'black';\r\n    ctx.fill()\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y + this.start, this.r, 0, 2 * Math.PI);\r\n    ctx.fillStyle = this.color;\r\n    ctx.fill()\r\n    ctx.font = 'bold ' + this.r * 1.3 + 'px arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = 'black';\r\n    ctx.fillText(this.text, this.x, this.y + this.start + 1);\r\n  }\r\n}\r\ninterface IExerciseNote {\r\n  x: number,\r\n  y: number,\r\n  r: number,\r\n  note: string;\r\n  pitch: number;\r\n  text?: string;\r\n  outline?: OutLine;\r\n}\r\nexport class ExerciseNote {\r\n  x: number;\r\n  y: number;\r\n  r: number;\r\n  note: string;\r\n  text?: string;\r\n  pitch: number;\r\n  color: string;\r\n  outline?: IOutLineProps;\r\n  constructor(props: Partial<IExerciseNote>) {\r\n    Object.assign(this, props);\r\n    this.color = \"white\"\r\n  }\r\n  update = (ctx: CanvasRenderingContext2D) => {\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI);\r\n    ctx.fillStyle = \"rgba(0, 0, 0, 0.2)\";\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, this.r * 0.6, 0, 2 * Math.PI);\r\n    ctx.fillStyle = this.color;\r\n    ctx.fill();\r\n    if (this.text) {\r\n      ctx.font = this.r * 2 + 'px arial';\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillText(this.text, this.x - this.r * 1.2, this.y);\r\n    }\r\n    if (this.outline) {\r\n      ctx.globalCompositeOperation = 'destination-over';\r\n      new OutLine(ctx, this.outline)\r\n      ctx.globalCompositeOperation = 'source-over';\r\n    }\r\n  }\r\n}\r\nexport interface IOutLineProps {\r\n  r: number,\r\n  x: number,\r\n  y: number\r\n}\r\nexport class OutLine {\r\n  constructor(ctx: CanvasRenderingContext2D, { r, x, y }: IOutLineProps) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(x - r, y);\r\n    ctx.lineTo(x + r, y);\r\n    ctx.lineWidth = 0.5;\r\n    ctx.strokeStyle = \"black\";\r\n    ctx.stroke();\r\n  }\r\n}\r\n","import { INotePos, INoteMemo, INeededNote } from \"../../_types/player.types\";\r\nimport { ExerciseNote, IOutLineProps } from \"./Canvas\";\r\n\r\nexport default class Notes {\r\n  public counter = 0;\r\n  public tapSize: number;\r\n  public spaceSize: number;\r\n  private width: number;\r\n  private height: number;\r\n  private notePos: INotePos = {};\r\n  private fullNotes: {\r\n    [key: number]: ExerciseNote[];\r\n  } = {};\r\n  private context: CanvasRenderingContext2D;\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n    this.context = canvas.getContext(\"2d\")!;\r\n  }\r\n  assigner = (options: Partial<any>) => {\r\n    Object.assign(this, options);\r\n  };\r\n  playGame = (num: number, color: string) => {\r\n    this.clear();\r\n    this.updateFullSong(num, color);\r\n  };\r\n  clear = () => {\r\n    this.context.clearRect(0, 0, this.width, this.height);\r\n  };\r\n  drawNote = (showTrack: INeededNote) => {\r\n    const gap = this.spaceSize * 1.6;\r\n    let r = this.tapSize * 0.46;\r\n    r = this.spaceSize < 20 ? this.spaceSize * 0.42 : r;\r\n    let memo = \"K\";\r\n    let outline: IOutLineProps;\r\n    let noteMemo: INoteMemo[] = [{ note: \"K\", text: \"!\" }];\r\n    Object.values(showTrack).forEach((noteArr: any, i) => {\r\n      if (noteArr.length > 0)\r\n        noteArr.forEach((n: any) => {\r\n          const pitch = n.pitch + 36;\r\n          let y = this.notePos[pitch].pos;\r\n          let note = this.notePos[pitch].note;\r\n          const x = gap + i * this.spaceSize;\r\n          let prevNote = this.notePos[pitch - 1];\r\n          let text;\r\n          if (note.length === 2) {\r\n            let prevState = noteMemo.find((o) => o.note === note);\r\n            if (prevState) {\r\n              text = prevState.text;\r\n              note = prevState.note;\r\n            } else if (!prevNote.note.includes(memo) && i !== 0) {\r\n              text = \"♯\";\r\n              note = prevNote.note;\r\n              y = prevNote.pos;\r\n            } else {\r\n              text = \"♭\";\r\n            }\r\n            noteMemo.push({ note, text });\r\n          }\r\n          if (pitch === 81 || pitch === 60 || pitch === 61 || pitch === 40) {\r\n            outline = { r: r * 1.5, x, y };\r\n          }\r\n          if (pitch === 59 || pitch === 58) {\r\n            outline = { r: r * 1.2, x, y: this.notePos[60].pos };\r\n          }\r\n          memo = note;\r\n          const notes = new ExerciseNote({\r\n            x,\r\n            y,\r\n            r,\r\n            pitch,\r\n            text,\r\n            note,\r\n            outline,\r\n          });\r\n          notes.update(this.context);\r\n          if (!this.fullNotes[i]) this.fullNotes[i] = [];\r\n          this.fullNotes[i].push(notes);\r\n        });\r\n    });\r\n  };\r\n  resetGame() {\r\n    this.clear();\r\n    Object.values(this.fullNotes).forEach((notes) => {\r\n      notes.forEach((note) => {\r\n        note.color = \"white\";\r\n        note.update(this.context);\r\n      });\r\n    });\r\n  }\r\n  updateFullSong = (num: number, color: string) => {\r\n    Object.values(this.fullNotes).forEach((notes, i) => {\r\n      notes.forEach((note) => {\r\n        if (i === num) note.color = color;\r\n        if (i === num - 1) note.color = \"green\";\r\n        note.update(this.context);\r\n      });\r\n    });\r\n  };\r\n}\r\n","import MidiState from \"../../_helpers/midiContext\";\r\nimport { BackMover, MusicLine, LessonNote } from \"./Canvas\";\r\nimport { IPianoSizes } from \"../../_types/player.types\";\r\n\r\nexport default class Game {\r\n  public counter = 0;\r\n  public tapSize: number = 32;\r\n  public songLength: number = 17;\r\n  private gap: number;\r\n  private bpm: number;\r\n  private rythm: number;\r\n  private margin: number = 128;\r\n  private width: number;\r\n  private height: number;\r\n  private notes: LessonNote[] = [];\r\n  private image: HTMLImageElement;\r\n  private backMover: BackMover[] = [];\r\n  private barNotes: LessonNote[][] = [];\r\n  private fullNotes: LessonNote[] = [];\r\n  private context: CanvasRenderingContext2D;\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.image = new Image();\r\n    this.width = canvas.width;\r\n    this.height = canvas.height;\r\n    this.context = canvas.getContext(\"2d\")!;\r\n  }\r\n  assigner = (options: Partial<any>) => {\r\n    Object.assign(this, options);\r\n  };\r\n  playGame = (y: number) => {\r\n    this.clear();\r\n    this.updateBacks(y);\r\n    this.updateNotes(y);\r\n  };\r\n  clear = () => {\r\n    this.context.clearRect(0, 0, this.width, this.height);\r\n  };\r\n  pitchName = (pitch: number) => {\r\n    let n = pitch % 12;\r\n    let t = \"C\";\r\n    if (n === 1) {\r\n      t = \"Db\";\r\n    }\r\n    if (n === 2) {\r\n      t = \"D\";\r\n    }\r\n    if (n === 3) {\r\n      t = \"Eb\";\r\n    }\r\n    if (n === 4) {\r\n      t = \"E\";\r\n    }\r\n    if (n === 5) {\r\n      t = \"F\";\r\n    }\r\n    if (n === 6) {\r\n      t = \"Gb\";\r\n    }\r\n    if (n === 7) {\r\n      t = \"G\";\r\n    }\r\n    if (n === 8) {\r\n      t = \"Ab\";\r\n    }\r\n    if (n === 9) {\r\n      t = \"A\";\r\n    }\r\n    if (n === 10) {\r\n      t = \"Bb\";\r\n    }\r\n    if (n === 11) {\r\n      t = \"B\";\r\n    }\r\n    return \"\" + t;\r\n  };\r\n  drawImage = () => {\r\n    const myLine = document.createElement(\"canvas\").getContext(\"2d\")!;\r\n    myLine.canvas.width = this.width;\r\n    myLine.canvas.height = this.height;\r\n    myLine.save();\r\n    let lw: number;\r\n    let color: string;\r\n    Array.from(Array(this.rythm + 1), (_, i) => i).forEach((_, v) => {\r\n      if (v === this.rythm) {\r\n        lw = 4;\r\n        color = \"black\";\r\n      } else if (v % this.rythm === 0) {\r\n        return;\r\n      } else if (v % (this.rythm / 2) === 0) {\r\n        lw = 1.5;\r\n        color = \"rgba(0,0,0,0.8)\";\r\n      } else if (v % (this.rythm / this.bpm) === 0) {\r\n        lw = 1;\r\n        color = \"rgba(0,0,0,0.7)\";\r\n      } else {\r\n        lw = 0.5;\r\n        color = \"rgba(0,0,0,0.2)\";\r\n      }\r\n      const y = v * this.tapSize;\r\n      const line = new MusicLine({\r\n        width: this.width,\r\n        x: 0,\r\n        y,\r\n        color,\r\n        lw,\r\n      });\r\n      line.draw(myLine);\r\n    });\r\n    this.image.src = myLine.canvas.toDataURL(\"image/png\");\r\n    let firstLine: BackMover;\r\n    this.image.onload = () => {\r\n      if (!firstLine) {\r\n        firstLine = new BackMover(0, this.height, this.margin);\r\n        firstLine.update(this.context, this.image);\r\n      }\r\n    };\r\n  };\r\n  drawNote = (showTrack: any[], notePos: IPianoSizes[]) => {\r\n    const tap = this.tapSize;\r\n    Array.from(Array(this.songLength), (_, i) => i).forEach((m) => {\r\n      const r = notePos[1].width;\r\n      const y = tap * (this.rythm * m);\r\n      this.barNotes[m] = [];\r\n      showTrack.forEach((p) => {\r\n        if (p.beat >= m * this.rythm) {\r\n          if (p.beat < (m + 1) * this.rythm) {\r\n            const yy = y + tap * (p.beat % this.rythm);\r\n            const cc = notePos[p.pitch].center;\r\n            const le = yy + tap * p.length;\r\n            const note = new LessonNote({\r\n              width: r,\r\n              height: le,\r\n              color: \"yellow\",\r\n              x: cc,\r\n              y: yy,\r\n              end: le + this.height * 3,\r\n              text: this.pitchName(p.pitch),\r\n              note: p.pitch + 36,\r\n              gap: this.gap,\r\n            });\r\n            this.barNotes[m].push(note);\r\n            this.fullNotes.push(note);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n  drawBack = () => {\r\n    this.backMover = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      this.backMover.push(new BackMover(i, this.height, this.margin));\r\n    }\r\n  };\r\n  pushNote = (num?: number) => {\r\n    if (num) this.counter = num;\r\n    if (this.barNotes[this.counter] && this.barNotes[this.counter].length > 0) {\r\n      this.barNotes[this.counter].forEach((g) => {\r\n        this.notes.push(g);\r\n      });\r\n    }\r\n    this.counter++;\r\n  };\r\n  updateNotes = (y: number) => {\r\n    this.notes.forEach((note, i) => {\r\n      note.y = y;\r\n      note.update(this.context);\r\n      if (note.end < y) {\r\n        this.notes.splice(i, 1);\r\n        // missing notes\r\n        // if (!note.hit)\r\n        // \tthis.score.push([note.note, 'miss'])\r\n      }\r\n      if (this.gap - note.y <= note.start) {\r\n        let hit: string;\r\n        MidiState.touchedKeys.forEach((touch) => {\r\n          if (note.note === touch.note) {\r\n            if (\r\n              touch.y > note.beg - this.tapSize &&\r\n              touch.y < note.beg + this.tapSize\r\n            ) {\r\n              note.hit = y - this.gap + this.tapSize * 0.1;\r\n              if (\r\n                touch.y - this.tapSize * 0.3 <= note.beg &&\r\n                touch.y + this.tapSize * 0.3 >= note.beg\r\n              ) {\r\n                hit = \"p\";\r\n                note.color = \"green\";\r\n              } else if (touch.y > note.beg) {\r\n                hit = \"l\";\r\n                note.color = \"purple\";\r\n              } else if (touch.y < note.beg) {\r\n                hit = \"e\";\r\n                note.color = \"orange\";\r\n              }\r\n              if (!touch.hit) {\r\n                touch[\"hit\"] = hit;\r\n                MidiState.score.push([note.note, touch.hit]);\r\n              }\r\n            }\r\n          }\r\n        });\r\n        note.move();\r\n      }\r\n    });\r\n  };\r\n  updateBacks = (y: number) => {\r\n    Array.from(Array(this.songLength), (_, i) => i).forEach((_, m) => {\r\n      this.context.drawImage(\r\n        this.image,\r\n        0,\r\n        Math.floor(y - m * this.image.height - this.margin)\r\n      );\r\n    });\r\n  };\r\n  updateFullSong = (y: number) => {\r\n    this.clear();\r\n    Array.from(Array(this.songLength), (_, i) => i).forEach((_, m) => {\r\n      this.context.drawImage(\r\n        this.image,\r\n        0,\r\n        Math.floor(y - m * this.image.height - this.margin)\r\n      );\r\n    });\r\n    this.fullNotes.forEach((note) => {\r\n      note.y = y;\r\n      note.update(this.context);\r\n    });\r\n  };\r\n}\r\n","import {\r\n  ICanvas,\r\n  IDetails,\r\n  INeededTrack,\r\n  INeededNote,\r\n  INoteDraw,\r\n  IPianoSizes,\r\n} from \"../../_types/player.types\";\r\nimport { WebAudioFontChannel, WebAudioFontPlayer } from \"./WebAudio\";\r\nimport MidiState from \"../../_helpers/midiContext\";\r\nimport { FingersClass } from \"../Game/Canvas\";\r\nimport Notes from \"../Game/Notes\";\r\nimport Game from \"../Game/Game\";\r\nimport Song from \"./Song\";\r\n\r\nexport class Melodition {\r\n  public game?: Game;\r\n  public notes?: Notes;\r\n  public master?: WebAudioFontChannel;\r\n  public player?: WebAudioFontPlayer;\r\n  public song?: Song;\r\n  public songDetails: IDetails;\r\n  public loaded: boolean = false;\r\n  public onAir: boolean = false;\r\n  public score: any[] = [];\r\n  public handRefs: any = [];\r\n  public seekBar?: { changeSeeker: (v: number) => void };\r\n  public keyRefs: SVGGElement[] = [];\r\n  public canvasSize?: ICanvas;\r\n  public pianoSize?: IPianoSizes[];\r\n  public seekValue = 0;\r\n  public metVol = 0.75;\r\n  public metTrack = 0;\r\n  public metOn = true;\r\n  public songLength = 272;\r\n  public tapSize = 32;\r\n  public loading = true;\r\n  public playMode = false;\r\n  public noteMode = false;\r\n  public TrackID = 0;\r\n  public bpm = 4;\r\n  public rythm = 16;\r\n  public tempo = 120;\r\n  public playVolume = 0.75;\r\n  public musicVolume = 0.75;\r\n  public drumInfo: any[] = [];\r\n  public trackInfo: any[] = [];\r\n  public metronomeInfo: any[] = [];\r\n  public storeDrums: any[] = [];\r\n  public storeTracks: any[] = [];\r\n  public storeFingers: any[] = [];\r\n  public equalizer = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  public drumVolumes = [70, 70, 70, 70, 70, 70, 70, 70];\r\n  public noteInfo: INoteDraw;\r\n  public neededTracks: INeededTrack[];\r\n  public fingerNotes: INeededNote;\r\n  private firstDelay!: NodeJS.Timeout;\r\n  private tickID!: NodeJS.Timeout;\r\n  private currentBeat = 0;\r\n  private tickerDelay = 1;\r\n  private tickerStep = 0;\r\n  private animeFrame = 0;\r\n  private nextWhen = 0;\r\n  private nextBeat = 0;\r\n  private sentWhen = 0;\r\n  private yPos = 0;\r\n  private anime: number[] = [];\r\n  private finger: FingersClass[] = [];\r\n  private midiKeys: any[] = [];\r\n  private trainNotes: FingersClass[] = [];\r\n  constructor(options: Partial<any>) {\r\n    Object.assign(this, options);\r\n    console.log(this);\r\n  }\r\n  assigner(options: Partial<any>) {\r\n    Object.assign(this, options);\r\n    console.log(options);\r\n  }\r\n  drawNote = (canvas: HTMLCanvasElement) => {\r\n    this.noteMode = true;\r\n    this.notes = new Notes(canvas);\r\n    this.notes.assigner({ ...this.noteInfo });\r\n    this.notes.drawNote(this.fingerNotes);\r\n    this.stopReset();\r\n  };\r\n  drawGame = (canvas: HTMLCanvasElement) => {\r\n    this.game = new Game(canvas);\r\n    const tapSize = this.tapSize;\r\n    const line = this.bpm <= 4 ? 4 : this.bpm;\r\n    this.game.assigner({\r\n      tapSize,\r\n      bpm: this.bpm,\r\n      rythm: this.rythm,\r\n      songLength: Math.round(this.songLength / this.rythm),\r\n      gap: tapSize * (this.rythm - line),\r\n      margin: tapSize * line,\r\n    });\r\n    this.game.clear();\r\n    this.game.drawImage();\r\n    if (this.pianoSize) {\r\n      this.game.drawNote(this.neededTracks, this.pianoSize);\r\n    }\r\n  };\r\n  startPlay = () => {\r\n    if (this.onAir || !this.loaded) {\r\n      console.log(\"on air already\");\r\n      return;\r\n    }\r\n    this.score = [];\r\n    this.yPos = 0;\r\n    this.resetNodeValues();\r\n    this.nextBeat = 0;\r\n    this.nextWhen = 0;\r\n    this.game?.assigner({ counter: 0 });\r\n    if (this.player?.audioContext.state === \"suspended\") {\r\n      console.log(\"audioContext.resume\");\r\n      this.player?.audioContext.resume();\r\n    }\r\n    this.onAir = true;\r\n    const beatDur = ((4 * 60) / this.tempo) * 1000;\r\n    this.firstDelay = setTimeout(() => {\r\n      this.playAllTracks(0.03);\r\n    }, beatDur);\r\n    if (this.noteMode) this.nextBeat = this.rythm - 2;\r\n    this.queueNextBeats();\r\n    this.onAir = true;\r\n    if (this.playMode) {\r\n      this.game?.drawBack();\r\n      this.game?.pushNote();\r\n      this.animeFrame = requestAnimationFrame(this.moveSVG);\r\n    } else {\r\n      this.stopReset();\r\n      this.animeFrame = requestAnimationFrame(this.moveFingers);\r\n    }\r\n  };\r\n  stopPlay = () => {\r\n    if (!this.onAir || !this.loaded) {\r\n      console.log(\"Not On Air\");\r\n      return;\r\n    }\r\n    this.onAir = false;\r\n    if (!this.playMode) this.stopReset();\r\n    document.getElementById(\"play-button\")?.click();\r\n    clearTimeout(this.firstDelay);\r\n    this.stopAllTracks();\r\n    cancelAnimationFrame(this.animeFrame);\r\n    clearTimeout(this.tickID);\r\n    this.player?.cancelQueue();\r\n  };\r\n  stopReset = () => {\r\n    if (this.notes) {\r\n      this.notes.resetGame();\r\n    }\r\n    this.finger.forEach((fin) => {\r\n      fin.hide();\r\n    });\r\n    this.seekValue = this.currentBeat - 1;\r\n    this.yPos = 0;\r\n    this.anime = [];\r\n    this.finger = [];\r\n    if (!this.onAir) this.training();\r\n  };\r\n  training = () => {\r\n    this.finger.forEach((note) => {\r\n      if (note?.showing) note.hide();\r\n    });\r\n    if (this.yPos >= this.fingerNotes.length) {\r\n      this.stopReset();\r\n      return;\r\n    }\r\n    if (this.noteMode) this.seekMove(this.yPos * 5.3333);\r\n    const next = Number(Object.keys(this.fingerNotes)[this.yPos]);\r\n    this.anime.push(next);\r\n    this.pushFinger();\r\n    this.trainNotes = [];\r\n    this.finger.forEach((o) => {\r\n      if (o.num === this.yPos - 1) this.trainNotes.push(o);\r\n    });\r\n    this.trainNotes.forEach((note) => {\r\n      note.show();\r\n      this.notes?.playGame(note.num, note.color);\r\n    });\r\n  };\r\n  stopAllTracks = () => {\r\n    if (this.song) {\r\n      this.song.stop();\r\n      this.song.elapsedTimeSinceStart = 0;\r\n    }\r\n  };\r\n  playAllTracks = (startTime: number) => {\r\n    if (this.song) {\r\n      this.song.setMasterVolume(this.musicVolume);\r\n      this.song.play(startTime);\r\n      for (let i = 0; i < this.song.getNbTracks(); i++) {}\r\n    }\r\n  };\r\n  rakeMouseWheel = (e: number | React.WheelEvent) => {\r\n    if (!this.onAir && this.playMode) {\r\n      if (typeof e !== \"number\")\r\n        this.seekValue = this.seekValue + (e.deltaY > 0 ? -1 : 1);\r\n      else this.seekValue = e;\r\n      this.seekValue =\r\n        this.seekValue < 0\r\n          ? 0\r\n          : this.seekValue > this.songLength - 1\r\n          ? this.songLength - 1\r\n          : this.seekValue;\r\n      const seekY = this.seekValue * this.tapSize;\r\n      this.seekMove(this.seekValue);\r\n      this.seekSVG(seekY);\r\n    }\r\n  };\r\n  seekMove = (value: number) => {\r\n    if (this.seekBar && value < this.songLength) {\r\n      this.seekBar.changeSeeker(value);\r\n    }\r\n  };\r\n  seekSVG = (y: number) => {\r\n    if (!this.onAir) {\r\n      this.game?.updateFullSong(y);\r\n    }\r\n  };\r\n  resetNodeValues = () => {\r\n    for (let i = 0; i < this.trackInfo.length; i++) {\r\n      this.trackInfo[i].audioNode.gain.setValueAtTime(\r\n        this.trackInfo[i].volume / 100,\r\n        0\r\n      );\r\n    }\r\n    for (let i = 0; i < this.drumInfo.length; i++) {\r\n      this.drumInfo[i].audioNode.gain.setValueAtTime(\r\n        this.drumVolumes[i] / 100,\r\n        0\r\n      );\r\n    }\r\n    this.master?.band32.gain.setValueAtTime(this.equalizer[0], 0);\r\n    this.master?.band64.gain.setValueAtTime(this.equalizer[1], 0);\r\n    this.master?.band128.gain.setValueAtTime(this.equalizer[2], 0);\r\n    this.master?.band256.gain.setValueAtTime(this.equalizer[3], 0);\r\n    this.master?.band512.gain.setValueAtTime(this.equalizer[4], 0);\r\n    this.master?.band1k.gain.setValueAtTime(this.equalizer[5], 0);\r\n    this.master?.band2k.gain.setValueAtTime(this.equalizer[6], 0);\r\n    this.master?.band4k.gain.setValueAtTime(this.equalizer[7], 0);\r\n    this.master?.band8k.gain.setValueAtTime(this.equalizer[8], 0);\r\n    this.master?.band16k.gain.setValueAtTime(this.equalizer[9], 0);\r\n  };\r\n  queueNextBeats = () => {\r\n    if (this.onAir && this.player) {\r\n      let beat16duration = (4 * 60) / this.tempo / this.rythm;\r\n      let t = this.player.audioContext.currentTime;\r\n      if (t && this.nextWhen < t) {\r\n        this.nextWhen = t;\r\n      }\r\n      while (this.sentWhen < t + beat16duration) {\r\n        if (this.playMode && this.nextBeat % 4 === 0)\r\n          this.playMetronome(this.nextWhen, this.nextBeat);\r\n        this.sendNextBeats(this.nextWhen, this.nextBeat, this.nextBeat);\r\n        this.nextWhen = this.sentWhen + beat16duration;\r\n        if (this.nextBeat > this.songLength) {\r\n          this.stopPlay();\r\n        }\r\n        this.nextBeat = this.nextBeat + 1;\r\n        if (this.playMode && (this.nextBeat / this.rythm) % 1 === 0) {\r\n          this.game?.pushNote();\r\n        }\r\n        this.seekMove(this.nextBeat);\r\n        if (!this.playMode) this.pushFinger();\r\n      }\r\n      let wait = 0.75 * 1000 * (this.nextWhen - t);\r\n      this.tickerStep++;\r\n      if (this.tickerStep >= this.tickerDelay) {\r\n        this.tickerStep = 0;\r\n      }\r\n      this.tickID = setTimeout(() => {\r\n        this.queueNextBeats();\r\n      }, wait);\r\n    }\r\n  };\r\n  sendNextBeats = (when: number, startBeat: number, endBeat: number) => {\r\n    this.sentWhen = when;\r\n    let N = (4 * 60) / this.tempo;\r\n    let beatLen = (1 / this.rythm) * N;\r\n    this.currentBeat = startBeat;\r\n    this.storeDrums.forEach((hit) => {\r\n      if (hit.beat >= startBeat && hit.beat <= endBeat) {\r\n        let channel = this.findDrumInfoHand(hit.drum);\r\n        let zones = channel.sound;\r\n        if (channel.info && window[channel.info.variable]) {\r\n          zones = window[channel.info.variable];\r\n        }\r\n        let r = 1.0 - Math.random() * 0.2;\r\n        this.player?.queueWaveTable({\r\n          target: channel.audioNode,\r\n          preset: zones,\r\n          when: when + beatLen * (hit.beat - startBeat),\r\n          pitches: channel.pitch,\r\n          duration: channel.length,\r\n          volume: r * channel.volumeRatio * this.musicVolume,\r\n        });\r\n      }\r\n    });\r\n    let notes: any[] = [];\r\n    this.storeTracks.forEach((note) => {\r\n      if (note.beat >= startBeat && note.beat <= endBeat) {\r\n        notes.push(note);\r\n      }\r\n    });\r\n    notes.sort((n1, n2) => {\r\n      let r = 1000 * (n1.beat - n2.beat) + 100000 * (n1.track - n2.track);\r\n      if (n1.beat === n2.beat) {\r\n        r = r + (n1.pitch - n2.pitch);\r\n      }\r\n      return r;\r\n    });\r\n    let currentBeat = -1;\r\n    let currentTrack = -1;\r\n    let inChordCount = 0;\r\n    notes.forEach((note) => {\r\n      let channel = this.trackInfo.find((trc) => trc.nn === note.track);\r\n      if (note.beat !== currentBeat || note.track !== currentTrack) {\r\n        currentBeat = note.beat;\r\n        currentTrack = note.track;\r\n        inChordCount = 0;\r\n        if (note.track === this.TrackID) {\r\n          this.anime.push(note.beat);\r\n        }\r\n      }\r\n      let zones = channel.sound;\r\n      if (channel.info && window[channel.info.variable]) {\r\n        zones = window[channel.info.variable];\r\n      }\r\n      let shift = [\r\n        {\r\n          when: note.length * beatLen,\r\n          pitch: note.shift + channel.octave * 12 + note.pitch,\r\n        },\r\n      ];\r\n      let r = 0.6 - Math.random() * 0.2;\r\n      this.player?.queueWaveTable({\r\n        target: channel.audioNode,\r\n        preset: zones,\r\n        when:\r\n          when +\r\n          beatLen * (note.beat - startBeat) +\r\n          inChordCount * channel.inChordDelay,\r\n        pitches: channel.octave * 12 + note.pitch,\r\n        duration: 0.075 + note.length * beatLen,\r\n        volume: r * channel.volumeRatio * this.musicVolume,\r\n        slides: shift,\r\n      });\r\n      inChordCount++;\r\n    });\r\n  };\r\n  pushFinger = () => {\r\n    const fingers = this.storeFingers[this.TrackID];\r\n    if (this.anime.length !== 0) {\r\n      this.anime.forEach((nBeat) => {\r\n        const beat = this.fingerNotes[nBeat];\r\n        if (beat) {\r\n          let handArr: any = {};\r\n          for (let fin in fingers) {\r\n            if (fingers[fin][nBeat]) {\r\n              const hand = this.handRefs[fin];\r\n              const key = fingers[fin][nBeat];\r\n              if (hand)\r\n                handArr[key] = {\r\n                  finger: hand,\r\n                  hand: hand.getAttribute(\"class\"),\r\n                };\r\n            }\r\n          }\r\n          beat.forEach((b: any) => {\r\n            const len = b.length;\r\n            const pitch = b.pitch + 36;\r\n            const note = this.keyRefs[pitch];\r\n            if (handArr[pitch]) {\r\n              this.finger.push(\r\n                new FingersClass({\r\n                  note: note,\r\n                  len: len,\r\n                  hand: handArr[pitch],\r\n                  beat: this.currentBeat,\r\n                  num: this.yPos,\r\n                  pitch,\r\n                })\r\n              );\r\n            }\r\n          });\r\n          this.yPos++;\r\n        }\r\n        this.anime = this.anime.filter((item) => item !== nBeat);\r\n      });\r\n    }\r\n  };\r\n  moveFingers = () => {\r\n    if (this.onAir) {\r\n      this.finger.forEach((fin) => {\r\n        if (fin.showing && this.currentBeat > fin.end) {\r\n          fin.hide();\r\n        } else if (fin.showing) {\r\n          if (this.noteMode && this.notes) {\r\n            this.notes.playGame(fin.num, \"green\");\r\n          }\r\n          fin.show();\r\n        }\r\n      });\r\n      requestAnimationFrame(this.moveFingers);\r\n    }\r\n  };\r\n  moveSVG = () => {\r\n    if (this.player && this.game && this.onAir) {\r\n      const N = (4 * 60) / this.tempo;\r\n      const beatLen = (1 / this.rythm) * N;\r\n      let diff =\r\n        this.nextBeat +\r\n        (this.player.audioContext.currentTime - this.nextWhen) / beatLen;\r\n      while (diff < 0) {\r\n        diff = diff + this.songLength;\r\n      }\r\n      if (diff > this.songLength - 1) {\r\n        diff = this.songLength - 1;\r\n      }\r\n      if (this.game.counter < 4 && diff > 100) diff = 0;\r\n      let y = Math.round(diff * this.tapSize);\r\n      this.yPos = y;\r\n      this.game.playGame(y);\r\n      requestAnimationFrame(this.moveSVG);\r\n    }\r\n  };\r\n  findTrackInfoHand = (): any => {\r\n    let track = null;\r\n    this.trackInfo.forEach((trc) => {\r\n      if (trc.nn === this.TrackID) {\r\n        track = trc;\r\n      }\r\n    });\r\n    return track;\r\n  };\r\n  findDrumInfoHand = (order: number): any => {\r\n    let drum = null;\r\n    this.drumInfo.forEach((drm) => {\r\n      if (drm.id === order) {\r\n        drum = drm;\r\n      }\r\n    });\r\n    return drum;\r\n  };\r\n  playMetronome = (when: number, startBeat: number) => {\r\n    const bpm = this.bpm === 6 ? 3 : this.bpm;\r\n    if (startBeat === 0) when = 0;\r\n    const pitches = (startBeat / 4) % bpm === 0 ? 38 : 36;\r\n    if (this.metOn && this.player) {\r\n      let channel = this.metronomeInfo[this.metTrack];\r\n      let zones = channel.sound;\r\n      this.player.queueWaveTable({\r\n        target: channel.audioNode,\r\n        preset: zones,\r\n        when,\r\n        pitches,\r\n        duration: 1,\r\n        volume: this.metVol,\r\n      });\r\n    }\r\n  };\r\n  midiNoteOn = (pitch: any, velocity: number) => {\r\n    if (velocity === 0) {\r\n      this.midiNoteOff(pitch);\r\n    } else {\r\n      this.midiNoteOff(pitch);\r\n      MidiState.touchedKeys.push({ note: pitch, y: this.yPos });\r\n      let channel = this.findTrackInfoHand();\r\n      if (channel) {\r\n        let zones = channel.sound;\r\n        if (channel.info && window[channel.info.variable]) {\r\n          zones = window[channel.info.variable];\r\n        }\r\n        this.midiKeys[pitch] = this.player?.queueWaveTable({\r\n          target: channel.audioNode,\r\n          preset: zones,\r\n          when: 0,\r\n          pitches: pitch,\r\n          duration: 10,\r\n          volume: velocity * this.playVolume,\r\n        });\r\n        const elem: any = this.keyRefs[pitch];\r\n        if (elem) {\r\n          let bColor = \"red\";\r\n          if (!this.onAir) {\r\n            const cColor = elem.children.back.getAttribute(\"fill\");\r\n            if (cColor !== \"white\" && cColor !== \"black\") {\r\n              bColor = \"green\";\r\n              if (\r\n                this.trainNotes.every((o) =>\r\n                  MidiState.touchedKeys.some((p) => p.note === o.pitch)\r\n                )\r\n              )\r\n                this.training();\r\n            }\r\n          }\r\n          elem.children.back.style.fill = bColor;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  midiNoteOff = (pitch: any) => {\r\n    if (this.midiKeys[pitch]) {\r\n      this.midiKeys[pitch].cancel();\r\n      MidiState.touchedKeys.forEach((_, i) => {\r\n        const notePitch = MidiState.touchedKeys[i].note;\r\n        if (pitch === notePitch) MidiState.touchedKeys.splice(i, 1);\r\n      });\r\n    }\r\n    if (this.keyRefs[pitch]) {\r\n      const elem: any = this.keyRefs[pitch];\r\n      if (elem) {\r\n        elem.children.back.style.fill = \"\";\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { ICanvas, IPianoSizes } from \"../_types/player.types\";\r\n\r\nexport const sizeCalculator = (keyRefs: SVGGElement[], pianoSize: ICanvas) => {\r\n    const lineWidth =\r\n        keyRefs[50].getBoundingClientRect().x -\r\n        (keyRefs[48].getBoundingClientRect().x +\r\n            keyRefs[48].getBoundingClientRect().width);\r\n    const keyXPos = pianoSize.pianoLeft\r\n    const padLeft = keyXPos ? keyXPos : 100;\r\n    const notePos: IPianoSizes[] = []\r\n    for (let k in keyRefs) {\r\n        const key = keyRefs[k];\r\n        const rect = key.getBoundingClientRect();\r\n        const x = rect.x - padLeft;\r\n        const w = rect.width;\r\n        const centerX = x + w / 2;\r\n        if (key.classList.contains(\"C\") || key.classList.contains(\"F\")) {\r\n            notePos.push({ left: x, center: centerX - lineWidth * 3.5, width: w, key: \"CF\" });\r\n        } else if (key.classList.contains(\"last\")) {\r\n            notePos.push({ left: x, center: centerX, width: w, key: \"last\" });\r\n        } else if (key.id === \"black\") {\r\n            notePos.push({ left: x, center: centerX, width: w, key: \"black\" });\r\n        } else if (key.classList.contains(\"E\") || key.classList.contains(\"B\"))\r\n            notePos.push({ left: x, center: centerX + lineWidth * 3.5, width: w, key: \"EB\" });\r\n        else if (key.classList.contains(\"A\"))\r\n            notePos.push({ left: x, center: centerX + lineWidth * 1.8, width: w, key: \"A\" });\r\n        else if (key.classList.contains(\"G\"))\r\n            notePos.push({ left: x, center: centerX + lineWidth * 1.4, width: w, key: \"G\" });\r\n        else notePos.push({ left: x, center: centerX, width: w, key: \"white\" });\r\n    }\r\n    notePos.push({ left: -100, center: 0, width: lineWidth, key: \"lineWidth\" });\r\n    return notePos;\r\n}","import { midiNoteOff, midiNoteOn } from \"./player.actions\";\r\nimport { errorHandler, seccessHandler } from \"../components/Layout/SnackBar/alert\";\r\n\r\nlet midiInput: WebMidi.MIDIInput;\r\n\r\nexport const requsetMidi = () => {\r\n    if (!navigator.requestMIDIAccess) errorHandler(\"لطفاً برای استفاده کامل از امکانات سایت از گوگل کروم یا مایکروسافت اج استفاده کنید.\");\r\n    else navigator.requestMIDIAccess()\r\n        .then((midiAccess) => {\r\n            console.log(\"MIDI Ready!\");\r\n            for (let entry of midiAccess.inputs) {\r\n                midiInput = entry[1]\r\n                seccessHandler(\"MIDI input device: \" + midiInput.name)\r\n                console.log(midiInput)\r\n                midiInput.onmidimessage = onMidiMessage;\r\n                midiInput.onstatechange = onstatechange;\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            errorHandler(\"Error accessing MIDI devices: \" + error);\r\n        });\r\n}\r\nexport const changeMidi = (enable: boolean) => {\r\n    if (midiInput)\r\n        midiInput.onmidimessage = enable ? onMidiMessage : () => { };\r\n}\r\n\r\n// const noteNames: string[] = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\r\n\r\nconst onstatechange = (midiState: WebMidi.MIDIConnectionEvent): void => {\r\n    console.log(midiState)\r\n    // warningHandler(midiState.)\r\n}\r\n\r\nlet notes: number[] = [];\r\nlet hold = false;\r\n\r\nconst onMidiMessage = (midiEvent: WebMidi.MIDIMessageEvent): void => {\r\n    let data: Uint8Array = midiEvent.data;\r\n    if (data.length === 3) {\r\n        // status is the first byte.\r\n        let status = data[0];\r\n        // command is the four most significant bits of the status byte.\r\n        let command = status >>> 4;\r\n        // channel 0-15 is the lower four bits.\r\n        // let channel = status & 0xF;\r\n\r\n        if (command === 11) {\r\n            let velocity = data[2];\r\n            if (velocity === 127 || velocity === 0)\r\n                hold = holder(velocity)\r\n        }\r\n        // just look at note on and note off messages.\r\n        if (command === 0x9 || command === 0x8) {\r\n            // note number is the second byte.\r\n            let note = data[1];\r\n            // velocity is the thrid byte.\r\n            let velocity = data[2];\r\n\r\n            // let commandName = command === 0x9 ? \"Note On \" : \"Note Off\";\r\n            // calculate octave and note name.\r\n            // let noteName = noteNames[note % 12];\r\n            // let octave = Math.trunc(note / 12);\r\n\r\n            if (command === 0x9 && velocity) {\r\n                midiNoteOn(note, velocity / 100)\r\n                notes.push(note)\r\n            } else {\r\n                if (!hold) {\r\n                    midiNoteOff(note)\r\n                    notes = [];\r\n                }\r\n            }\r\n            // console.log(`${commandName} ${noteName}${octave} ${velocity}`);\r\n        }\r\n    }\r\n}\r\nconst holder = (vol: number) => {\r\n    if (vol === 0) {\r\n        notes.forEach(n => {\r\n            midiNoteOff(n)\r\n        })\r\n        notes = []\r\n        return false\r\n    } else {\r\n        return true\r\n    }\r\n}"],"sourceRoot":""}