{"version":3,"sources":["router/ProtectedRoute.tsx"],"names":["ProtectedRoute","props","redirectPath","loggedIn","authenticationPath","isAllowed","restrictedPath","component","to","pathname","render","undefined","connect","state","auth"],"mappings":"uIAAA,iFAYaA,EAAgD,SAACC,GAC5D,IAAIC,EAAe,GAQnB,GAPKD,EAAME,WACTD,EAAeD,EAAMG,oBAEnBH,EAAME,WAAaF,EAAMI,YAC3BH,EAAeD,EAAMK,gBAGnBJ,EAAc,CAEhB,OAAO,gBAAC,IAAD,iBAAWD,EAAX,CAAkBM,UADD,kBAAM,gBAAC,IAAD,CAAUC,GAAI,CAAEC,SAAUP,MACHQ,YAAQC,KAE7D,OAAO,gBAAC,IAAUV,IAWPW,uBAPS,SAACC,GAEvB,MAAO,CACLV,SAFeU,EAATC,KAESX,YAIJS,CAAyBZ","file":"static/js/46.79e43680.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, RouteProps } from \"react-router\";\r\nimport { AppState } from \"../_types\";\r\n\r\ninterface ProtectedRouteProps extends RouteProps {\r\n  loggedIn?: boolean;\r\n  isAllowed?: boolean;\r\n  restrictedPath: string;\r\n  authenticationPath: string;\r\n}\r\n\r\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = (props) => {\r\n  let redirectPath = \"\";\r\n  if (!props.loggedIn) {\r\n    redirectPath = props.authenticationPath;\r\n  }\r\n  if (props.loggedIn && !props.isAllowed) {\r\n    redirectPath = props.restrictedPath;\r\n  }\r\n\r\n  if (redirectPath) {\r\n    const renderComponent = () => <Redirect to={{ pathname: redirectPath }} />;\r\n    return <Route {...props} component={renderComponent} render={undefined} />;\r\n  } else {\r\n    return <Route {...props} />;\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  const { auth } = state;\r\n  return {\r\n    loggedIn: auth.loggedIn,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProtectedRoute);\r\n"],"sourceRoot":""}