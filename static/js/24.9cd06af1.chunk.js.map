{"version":3,"sources":["components/Layout/Instruments/Piano/NoteCanvas/NoteBack.tsx","components/Layout/Instruments/Piano/NoteCanvas/index.tsx","components/LearningPages/Exercise/index.tsx"],"names":["NoteBack","props","width","height","loading","Melo","ref","backCtx","getContext","clearRect","strokeStyle","lineWidth","strokeRect","tapSize","fillStyle","fillRect","linesArray","forEach","v","i","y","length","beginPath","font","fontSize","textAlign","textBaseline","fillText","pitchName","spaceSize","outLine","moveTo","lineTo","stroke","fill","drawBackContext","style","zIndex","connectedPianoCanvas","connect","state","melodition","dispatch","drawNotes","bindActionCreators","noteInfo","position","margin","notesLoading","drawFrontContext","top","left","Exercise","updateDimensions","pianoLoading","resizePlayer","changeContent","fullContent","content","JSON","parse","requestPlayer","svgWidth","playModeChanger","changeMode","nextProps","data","this","id","console","log","window","addEventListener","path","pathFinder","pathname","requestLesson","exercise","resetPlayer","removeEventListener","setState","classes","error","rest","className","root","playMode","Grid","container","main","item","xs","direction","justify","alignItems","doubleGrid","noPad","Piano","Typography","excerpt","centerText","Fingers","sideStyle","component","autoMargin","Component","connectedExercise","ownProps","single","theme","auth","course","router","location","requestExercise","withStyles","createStyles","minHeight","overflow","breakpoints","down","flexWrap","maxWidth","padding","display","boxShadow"],"mappings":"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","file":"static/js/24.9cd06af1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { pitchName, outLine } from \"../constant\";\r\nimport { INoteDraw } from \"../../../../../_types/player.types\";\r\n\r\ninterface CanvasProps {\r\n  loading: boolean;\r\n}\r\nconst NoteBack: React.FC<CanvasProps & INoteDraw> = (props) => {\r\n  const { width, height, loading, ...Melo } = props;\r\n  const drawBackContext = (ref: HTMLCanvasElement | null) => {\r\n    if (ref && loading) {\r\n      const backCtx = ref.getContext(\"2d\")!;\r\n      backCtx.clearRect(0, 0, width, height);\r\n      backCtx.strokeStyle = \"black\";\r\n      backCtx.lineWidth = 0.1;\r\n      backCtx.strokeRect(0, Melo.tapSize / 2, width, height - Melo.tapSize);\r\n      backCtx.fillStyle = \"rgba(200, 200, 200, 0.2)\";\r\n      backCtx.fillRect(0, Melo.tapSize / 2, width, height - Melo.tapSize);\r\n      Melo.linesArray.forEach((v, i) => {\r\n        const y = ((i + 1) * Melo.tapSize) / 2;\r\n        if (i % 2 !== 0 && i !== Melo.linesArray.length - 1) {\r\n          backCtx.beginPath();\r\n          backCtx.font = \"bold \" + Melo.fontSize + \"px arial\";\r\n          backCtx.textAlign = \"center\";\r\n          backCtx.textBaseline = \"middle\";\r\n          backCtx.fillStyle = \"black\";\r\n          backCtx.fillText(pitchName(v), Melo.spaceSize * 0.5, y);\r\n          if (!outLine(v)) {\r\n            backCtx.moveTo(Melo.spaceSize, y);\r\n            backCtx.lineTo(width - Melo.spaceSize / 2, y);\r\n            backCtx.lineWidth = 1.5;\r\n            backCtx.strokeStyle = \"black\";\r\n            backCtx.stroke();\r\n            backCtx.fill();\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <canvas\r\n      ref={(ref) => drawBackContext(ref)}\r\n      width={width}\r\n      height={height}\r\n      style={{ zIndex: 1 }}\r\n    />\r\n  );\r\n};\r\nexport default NoteBack;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { drawNotes } from \"../../../../../_actions/player.actions\";\r\nimport { IMelodition } from \"../../../../../_types/player.types\";\r\nimport { AppActions, AppState } from \"../../../../../_types\";\r\nimport { LoadingCircle } from \"../../../Loadings\";\r\nimport NoteBack from \"./NoteBack\";\r\n\r\ninterface Props {\r\n  Melo: IMelodition;\r\n  drawNotes: (canvas: any) => void;\r\n}\r\nconst NoteCanvas: React.FC<Props> = ({ Melo, drawNotes }) => {\r\n  const drawFrontContext = (ref: HTMLCanvasElement | null) => {\r\n    if (ref && Melo.notesLoading) {\r\n      drawNotes(ref);\r\n    }\r\n  };\r\n  if (Melo.noteInfo) {\r\n    const { width, height } = Melo.noteInfo;\r\n    return (\r\n      <div\r\n        style={{\r\n          width: width,\r\n          height: height,\r\n          position: \"relative\",\r\n          margin: \"5px 0\",\r\n        }}\r\n      >\r\n        <NoteBack {...Melo.noteInfo} loading={Melo.notesLoading} />\r\n        <canvas\r\n          ref={(ref) => drawFrontContext(ref)}\r\n          width={width}\r\n          height={height}\r\n          style={{ position: \"absolute\", top: 0, left: 0, zIndex: 2 }}\r\n        />\r\n      </div>\r\n    );\r\n  } else return <LoadingCircle />;\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  Melo: state.melodition,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>) => ({\r\n  drawNotes: bindActionCreators(drawNotes, dispatch),\r\n});\r\n\r\nconst connectedPianoCanvas = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(NoteCanvas);\r\n\r\nexport default connectedPianoCanvas;\r\n","import React, { Component } from \"react\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  createStyles,\r\n  Grid,\r\n  Theme,\r\n  Typography,\r\n  WithStyles,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  requestPlayer,\r\n  resetPlayer,\r\n  changeMode,\r\n  resizePlayer,\r\n} from \"../../../_actions/player.actions\";\r\nimport { requestExercise } from \"../../../_actions/exercise.actions\";\r\nimport NoteCanvas from \"../../Layout/Instruments/Piano/NoteCanvas\";\r\nimport { PlayerLeftSide } from \"../../Layout/Player/PlayerSides\";\r\nimport Fingers from \"../../Layout/Instruments/Finger/Fingers\";\r\nimport { IMelodition } from \"../../../_types/player.types\";\r\nimport { pathFinder } from \"../../../_helpers/constants\";\r\nimport { PlayButton } from \"../../Layout/Player/Buttons\";\r\nimport { ICourse } from \"../../../_types/course.types\";\r\nimport { AppActions, AppState } from \"../../../_types\";\r\nimport { ILesson } from \"../../../_types/lesson.types\";\r\nimport { LoadingCircle } from \"../../Layout/Loadings\";\r\nimport Piano from \"../../Layout/Instruments/Piano\";\r\n\r\nconst useStyles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100vw\",\r\n      minHeight: \"calc(100vh - 128px)\",\r\n      overflow: \"hidden\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        minHeight: \"calc(100vh - 113px)\",\r\n      },\r\n      display: \"flex\",\r\n    },\r\n    autoMargin: {\r\n      margin: \"auto\",\r\n    },\r\n    main: {\r\n      width: \"100vw\",\r\n      minHeight: \"calc(100vh - 128px)\",\r\n      overflow: \"hidden\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        minHeight: \"calc(100vh - 113px)\",\r\n      },\r\n      display: \"flex\",\r\n    },\r\n    content: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      flexWrap: \"nowrap\",\r\n    },\r\n    doubleGrid: {\r\n      flexWrap: \"nowrap\",\r\n      width: \"100%\",\r\n      maxWidth: \"100%\",\r\n      \"& > div\": {\r\n        margin: \"auto\",\r\n        padding: 0,\r\n        height: \"100%\",\r\n      },\r\n    },\r\n    centerText: {\r\n      textAlign: \"center\",\r\n    },\r\n    sideStyle: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      flexWrap: \"nowrap\",\r\n    },\r\n    loading: {\r\n      display: \"flex\",\r\n      height: \"200px\",\r\n      boxShadow: \"inset 0 1px 4px 0px black\",\r\n    },\r\n  });\r\n\r\ninterface LessonProps extends WithStyles<typeof useStyles> {\r\n  error: string;\r\n  data?: ILesson;\r\n  course?: ICourse;\r\n  pathname: string;\r\n  melodition: IMelodition;\r\n  theme: \"light\" | \"dark\";\r\n}\r\n\r\ninterface States {}\r\n\r\ntype Props = LessonProps & ReturnType<typeof mapDispatchToProps>;\r\n\r\nclass Exercise extends Component<Props, States> {\r\n  shouldComponentUpdate(nextProps: Props) {\r\n    if (nextProps.data && this.props.data?.id !== nextProps.data.id) {\r\n      this.changeContent(nextProps.data.content);\r\n    }\r\n    return true;\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"mounted\");\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n    const path = pathFinder(this.props.pathname);\r\n    this.props.requestLesson(path);\r\n    if (this.props.data?.id === path.exercise) {\r\n      this.changeContent(this.props.data!.content);\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"dismount\");\r\n    this.props.resetPlayer();\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n    this.setState = () => {\r\n      return;\r\n    };\r\n  }\r\n  updateDimensions = () => {\r\n    if (!this.props.melodition.pianoLoading) {\r\n      this.props.resizePlayer();\r\n    }\r\n  };\r\n  changeContent = (fullContent: string) => {\r\n    const content = JSON.parse(fullContent);\r\n    this.props.requestPlayer(content);\r\n  };\r\n\r\n  svgWidth = (i: number): number => {\r\n    const num = i === 1 ? 668 : 584;\r\n    return num;\r\n  };\r\n\r\n  playModeChanger = () => {\r\n    this.props.changeMode(true);\r\n  };\r\n  render() {\r\n    const { classes, data, melodition, error, ...rest } = this.props;\r\n    return (\r\n      <div className={classes.root}>\r\n        {melodition.loading || melodition.playMode ? (\r\n          <LoadingCircle />\r\n        ) : data ? (\r\n          <Grid container className={classes.main}>\r\n            <Grid item xs={1}>\r\n              <PlayerLeftSide {...rest} data={data} />\r\n            </Grid>\r\n            <Grid item xs={10}>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                className={classes.content}\r\n              >\r\n                <Grid item xs={6} className={classes.doubleGrid}>\r\n                  <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={12}>\r\n                      {melodition.pianoLoading ? (\r\n                        <LoadingCircle noPad />\r\n                      ) : (\r\n                        <NoteCanvas />\r\n                      )}\r\n                      <Piano />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item xs={3} className={classes.doubleGrid}>\r\n                  <Grid container justify=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <Typography>{data.excerpt}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6} className={classes.centerText}>\r\n                      <Fingers />\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                className={classes.sideStyle}\r\n              >\r\n                <PlayButton loading={melodition.loading} />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <Typography component=\"div\" className={classes.autoMargin}>\r\n            {error}\r\n          </Typography>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: Props) => ({\r\n  ...state.single.exercise,\r\n  melodition: state.melodition,\r\n  theme: state.auth.theme,\r\n  classes: ownProps.classes,\r\n  course: state.single.course.data,\r\n  pathname: state.router.location.pathname,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AppActions>) => ({\r\n  changeMode: bindActionCreators(changeMode, dispatch),\r\n  requestLesson: bindActionCreators(requestExercise, dispatch),\r\n  requestPlayer: bindActionCreators(requestPlayer, dispatch),\r\n  resetPlayer: bindActionCreators(resetPlayer, dispatch),\r\n  resizePlayer: bindActionCreators(resizePlayer, dispatch),\r\n});\r\n\r\nconst connectedExercise = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(useStyles)(Exercise));\r\n\r\nexport default connectedExercise;\r\n"],"sourceRoot":""}