{"version":3,"sources":["../node_modules/@material-ui/core/esm/ListItemAvatar/ListItemAvatar.js","components/LearningPages/Guide/GuideItems.tsx","components/LearningPages/Guide/index.tsx"],"names":["ListItemAvatar","React","props","ref","classes","className","other","_objectWithoutProperties","context","ListContext","_extends","clsx","root","alignItems","alignItemsFlexStart","withStyles","minWidth","flexShrink","marginTop","name","useStyles","makeStyles","theme","createStyles","width","height","margin","spacing","cardAction","justifyContent","content","minHeight","rightChip","position","cursor","backgroundColor","leftChip","right","CourseItem","index","type","courseItem","path","title","id","thumbnails","grade","Card","CardActionArea","onClick","e","store","dispatch","push","Chip","label","color","CardMedia","component","alt","image","thumbnailsFinder","CardContent","Typography","gutterBottom","variant","ExerciseItem","exerciseItem","featured_img","info","Guide","pathFinder","this","pathname","guide","requestGuide","data","loading","error","counter","Grid","container","justify","guide_select","map","k","List","key","exercise","ListItem","Avatar","ListItemText","primary","season","secondary","exercise_description","Divider","guideItem","i","course","course_description","autoMargin","Component","connect","state","ownProps","router","location","single","bindActionCreators","breakpoints","down","padding"],"mappings":"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","file":"static/js/22.e1c36b85.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    minWidth: 56,\n    flexShrink: 0\n  },\n\n  /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n  alignItemsFlexStart: {\n    marginTop: 8\n  }\n};\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\n\nvar ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component â€“ normally `Avatar`.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemAvatar'\n})(ListItemAvatar);","import React from \"react\";\r\nimport { push } from \"connected-react-router\";\r\nimport {\r\n  Card,\r\n  CardMedia,\r\n  Typography,\r\n  CardContent,\r\n  CardActionArea,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport { store } from \"../../../_store/store.config\";\r\nimport { thumbnailsFinder } from \"../../../_helpers/constants\";\r\nimport { ILesson } from \"../../../_types/lesson.types\";\r\nimport { ICourse } from \"../../../_types/course.types\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: 300,\r\n      height: 260,\r\n      margin: theme.spacing(1),\r\n    },\r\n    cardAction: {\r\n      justifyContent: \"space-between\",\r\n      margin: \"inherit\",\r\n    },\r\n    content: {\r\n      minHeight: 130,\r\n    },\r\n    rightChip: {\r\n      position: \"absolute\",\r\n      cursor: \"pointer\",\r\n      margin: theme.spacing(1),\r\n      backgroundColor: \"green\",\r\n    },\r\n    leftChip: {\r\n      position: \"absolute\",\r\n      right: 0,\r\n      cursor: \"pointer\",\r\n      margin: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n\r\ntype Props = {\r\n  courseItem: ICourse;\r\n  index: number;\r\n  type: string;\r\n  path: string;\r\n};\r\n\r\nexport const CourseItem: React.FC<Props> = ({\r\n  index,\r\n  type,\r\n  courseItem,\r\n  path,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { title, id, thumbnails, grade } = courseItem;\r\n\r\n  const clickHandler = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    store.dispatch(push(path + \"/\" + type + id));\r\n  };\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={clickHandler}>\r\n        <Chip label={index + 1} className={classes.rightChip} />\r\n        <Chip label={grade} className={classes.leftChip} color=\"secondary\" />\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={title}\r\n          height=\"130\"\r\n          image={thumbnailsFinder(thumbnails)}\r\n          title={title}\r\n        />\r\n        <CardContent className={classes.content}>\r\n          <Typography gutterBottom variant=\"body1\" component=\"h6\">\r\n            {title}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n};\r\n\r\ntype ExerciseProps = {\r\n  exerciseItem: ILesson;\r\n  index: number;\r\n  type: string;\r\n  path: string;\r\n};\r\n\r\nexport const ExerciseItem: React.FC<ExerciseProps> = ({\r\n  exerciseItem,\r\n  index,\r\n  type,\r\n  path,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { title, id, featured_img, info } = exerciseItem;\r\n\r\n  const clickHandler = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    store.dispatch(push(path + \"/\" + type + id));\r\n  };\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={clickHandler}>\r\n        <Chip label={index + 1} className={classes.rightChip} />\r\n        <Chip\r\n          label={info.grade.name}\r\n          className={classes.leftChip}\r\n          color=\"secondary\"\r\n        />\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={title}\r\n          height=\"130\"\r\n          image={thumbnailsFinder(featured_img)}\r\n          title={title}\r\n        />\r\n        <CardContent className={classes.content}>\r\n          <Typography gutterBottom variant=\"body1\" component=\"h6\">\r\n            {title}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport {\r\n  Grid,\r\n  createStyles,\r\n  Theme,\r\n  Typography,\r\n  WithStyles,\r\n  withStyles,\r\n  Divider,\r\n  Chip,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { AppActions, AppState } from \"../../../_types\";\r\nimport { IGuide } from \"../../../_types/guide.types\";\r\nimport { pathFinder, PathFinder, season } from \"../../../_helpers/constants\";\r\nimport { requestGuide } from \"../../../_actions/guide.actions\";\r\nimport { CourseItem, ExerciseItem } from \"./GuideItems\";\r\nimport { LoadingCircle } from \"../../Layout/Loadings\";\r\n\r\nconst useStyles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"99vw\",\r\n      minHeight: \"calc(100vh - 128px)\",\r\n      [theme.breakpoints.down(\"xs\")]: {\r\n        minHeight: \"calc(100vh - 112px)\",\r\n        padding: theme.spacing(1),\r\n      },\r\n      padding: theme.spacing(2),\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n    },\r\n    autoMargin: {\r\n      margin: \"auto\",\r\n    },\r\n  });\r\n\r\ninterface GuideProps extends WithStyles<typeof useStyles> {\r\n  data?: IGuide;\r\n  loading: boolean;\r\n  error: string;\r\n  pathname: string;\r\n}\r\n\r\ntype Props = GuideProps & LinkDispatchProps;\r\n\r\nclass Guide extends Component<Props> {\r\n  componentDidMount() {\r\n    const path = pathFinder(this.props.pathname);\r\n    if (path.guide) this.props.requestGuide(path);\r\n  }\r\n\r\n  render() {\r\n    const { classes, data, loading, error, pathname } = this.props;\r\n    let counter = 0;\r\n    return (\r\n      <Grid container justify=\"center\" className={classes.root}>\r\n        {loading ? (\r\n          <LoadingCircle />\r\n        ) : data ? (\r\n          data.guide_select.map((guide, k) => (\r\n            <List key={k}>\r\n              {guide.exercise && (\r\n                <>\r\n                  <ListItem>\r\n                    <ListItemAvatar>\r\n                      <Avatar>\r\n                        <Chip label={++counter} color=\"secondary\" />\r\n                      </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={season[counter]}\r\n                      secondary={guide.exercise_description}\r\n                    />\r\n                  </ListItem>\r\n                  <Divider variant=\"inset\" component=\"li\" />\r\n                  <Grid container justify=\"center\">\r\n                    {guide.exercise.map((guideItem, i) => (\r\n                      <ExerciseItem\r\n                        key={i}\r\n                        index={i}\r\n                        type={\"exercise=\"}\r\n                        path={pathname}\r\n                        exerciseItem={guideItem}\r\n                      />\r\n                    ))}\r\n                  </Grid>\r\n                </>\r\n              )}\r\n              {guide.course && (\r\n                <>\r\n                  <ListItem>\r\n                    <ListItemAvatar>\r\n                      <Avatar>\r\n                        <Chip label={++counter} color=\"secondary\" />\r\n                      </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                      primary={season[counter]}\r\n                      secondary={guide.course_description}\r\n                    />\r\n                  </ListItem>\r\n                  <Divider variant=\"inset\" component=\"li\" />\r\n                  <Grid container justify=\"center\">\r\n                    {guide.course?.map((guideItem, i) => (\r\n                      <CourseItem\r\n                        key={i}\r\n                        index={i}\r\n                        type={\"course=\"}\r\n                        path={pathname}\r\n                        courseItem={guideItem}\r\n                      />\r\n                    ))}\r\n                  </Grid>\r\n                </>\r\n              )}\r\n            </List>\r\n          ))\r\n        ) : (\r\n          <Typography component=\"div\" className={classes.autoMargin}>\r\n            {error}\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n  requestGuide: (path: PathFinder) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState, ownProps: Props): GuideProps => ({\r\n  pathname: state.router.location.pathname,\r\n  classes: ownProps.classes,\r\n  ...state.single.guide,\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: ThunkDispatch<any, any, AppActions>\r\n): LinkDispatchProps => ({\r\n  requestGuide: bindActionCreators(requestGuide, dispatch),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withStyles(useStyles)(Guide));\r\n"],"sourceRoot":""}